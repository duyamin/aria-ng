# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import re
import datetime
from cStringIO import StringIO

from aria import VERSION
from aria.utils import as_agnostic


def one_line(value):
    return value.strip().replace('\n', '; ')


def translate_assignment(assignment):
    if isinstance(assignment, dict):
        for k, v in assignment.iteritems():
            if k == 'get_input':
                return '$$context.service.%s$$' % v
            elif k == 'get_property':
                return '$$self.%s$$' % '.'.join(v)
            else:
                assignment[k] = translate_assignment(v)
    return assignment


def unquote_tokens(v):
    return re.sub(r'(\'\$\$|\$\$\')', '', v)


def repr_assignment(assignment):
    return unquote_tokens(repr(translate_assignment(as_agnostic(assignment))))


def create_header():
    with Writer() as writer:
        writer.write('"""')
        writer.write('Generated by ARIA version %s on %s' % (VERSION, datetime.datetime.utcnow()))
        writer.write('"""')
        writer.write()
        writer.put('from aria import has_validated_properties, validated_property, property_type, '
                   'property_default, property_status, required_property, has_interfaces, '
                   'interfacemethod')
        return str(writer)


class Writer(object):
    """
    A friendly wrapper over StringIO that supports Python's "with" keyword,
    indentation, and more.
    """
    def __init__(self):
        self.indent = 0
        self.stream = None

    def put_indent(self):
        if self.indent:
            for _ in range(self.indent):
                self.stream.write('    ')

    def put(self, str_=None):
        if str_ is not None:
            self.stream.write(str(str_))

    def write(self, str_=None, prefix=None):
        if str_ is not None:
            for str_ in str(str_).split('\n'):
                self.put_indent()
                if prefix is not None:
                    self.stream.write(prefix)
                self.stream.write(str_)
                self.stream.write('\n')
        else:
            self.stream.write('\n')

    def write_docstring(self, str_):
        self.write('"""')
        self.write(str_.strip())
        self.write('"""')

    def add_indent(self):
        self.indent += 1

    def remove_indent(self):
        self.indent -= 1

    def __enter__(self):
        self.stream = StringIO()
        return self

    def __exit__(self, the_type, value, traceback):
        self.stream.close()

    def __str__(self):
        return self.stream.getvalue()
